{"version":3,"file":"static/webpack/static/development/pages/index.js.8c5d7fba90f9c9a0baee.hot-update.js","sources":["webpack:///./lib/withUrqlClient.tsx"],"sourcesContent":["import React from \"react\";\nimport { Provider } from \"urql\";\nimport cookie from \"cookie\";\n\nimport ssrPrepass from \"react-ssr-prepass\";\nimport initUrqlClient from \"./initUrql\";\nimport { useAuthUserQuery } from \"../generated/graphql\";\n\nconst isBrowser: boolean = typeof window !== \"undefined\";\n\nconst withUrqlClient = App => {\n  const withUrql = props => {\n    const [{ fetching, error, data }] = useAuthUserQuery();\n    const urqlClient = React.useMemo(\n      () =>\n        props.urqlClient ||\n        initUrqlClient(props.urqlState, props.serverAccessToken)[0],\n      []\n    );\n    const authUser = !fetching && data.me;\n    return (\n      <Provider value={urqlClient}>\n        <App {...props} urqlClient={urqlClient} authUser={authUser} />\n      </Provider>\n    );\n  };\n\n  withUrql.getInitialProps = async ctx => {\n    const { AppTree } = ctx;\n    const { req, res } = ctx;\n    // Run the wrapped component's getInitialProps function\n    let appProps = {};\n    if (App.getInitialProps) appProps = await App.getInitialProps(ctx);\n\n    // getInitialProps is universal, but we only want\n    // to run server-side rendered suspense on the server\n    let serverAccessToken = \"\";\n    if (!isBrowser) {\n      const cookies = cookie.parse(\n        req.headers.cookie ? req.headers.cookie : \"\"\n      );\n      if (cookies.rfs) {\n        const response = await fetch(\"http://localhost:4000/refresh_token\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            cookie: \"rfs=\" + cookies.rfs\n          }\n        });\n        const data = await response.json();\n        serverAccessToken = data.accessToken;\n      }\n    }\n\n    if (isBrowser) return appProps;\n\n    const [urqlClient, ssrCache] = initUrqlClient({}, serverAccessToken);\n\n    // Run suspense and hence all urql queries\n\n    try {\n      await ssrPrepass(\n        <AppTree\n          pageProps={{\n            ...appProps,\n            urqlClient\n          }}\n        />\n      );\n    } catch (err) {\n      console.log(err);\n    }\n\n    // Extract query data from the urql store\n    // Extract the SSR query data from urql's SSR cache\n    const urqlState = ssrCache.extractData();\n\n    return {\n      ...appProps,\n      urqlState,\n      serverAccessToken\n    };\n  };\n\n  return withUrql;\n};\n\nexport default withUrqlClient;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAOA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAgBA;AACA;AACA;AACA;AADA;AAHA;AACA;AAhBA;AAeA;AAfA;AAAA;AACA;AADA;AAsBA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAoCA;AAEA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA2CA;AACA;AA5CA;AA8CA;AACA;AACA;AAhDA;AAoDA;AACA;AArDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwDA;AACA;AACA;AACA;;;;A","sourceRoot":""}