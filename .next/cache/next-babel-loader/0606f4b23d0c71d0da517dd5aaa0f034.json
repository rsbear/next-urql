{"ast":null,"code":"import { createClient, dedupExchange, cacheExchange, fetchExchange, ssrExchange } from 'urql';\nimport 'isomorphic-unfetch';\nlet urqlClient = null;\nlet ssrCache = null;\nexport default function initUrqlClient(initialState, serverAccessToken) {\n  // Create a new client for every server-side rendered request to reset its state\n  // for each rendered page\n  // Reuse the client on the client-side however\n  console.log(`server token ${serverAccessToken}`);\n  const isServer = true;\n\n  if (isServer || !urqlClient) {\n    ssrCache = ssrExchange({\n      initialState\n    });\n    urqlClient = createClient({\n      url: 'http://localhost:4000/graphql',\n      // Active suspense mode on the server-side\n      suspense: isServer,\n      exchanges: [dedupExchange, cacheExchange, ssrCache, fetchExchange]\n    });\n  } // Return both the cache and the client\n\n\n  return [urqlClient, ssrCache];\n}","map":{"version":3,"sources":["/Users/rsbear/dev/next-urql/lib/initUrql.ts"],"names":["createClient","dedupExchange","cacheExchange","fetchExchange","ssrExchange","urqlClient","ssrCache","initUrqlClient","initialState","serverAccessToken","console","log","isServer","url","suspense","exchanges"],"mappings":"AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,WALF,QAMO,MANP;AASA,OAAO,oBAAP;AAEA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,QAAQ,GAAG,IAAf;AAEA,eAAe,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,iBAAtC,EAAyD;AACtE;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,iBAAkB,EAA9C;AACA,QAAMG,QAAQ,OAAd;;AACA,MAAIA,QAAQ,IAAI,CAACP,UAAjB,EAA6B;AAC3BC,IAAAA,QAAQ,GAAGF,WAAW,CAAC;AAAEI,MAAAA;AAAF,KAAD,CAAtB;AAEAH,IAAAA,UAAU,GAAGL,YAAY,CAAC;AACxBa,MAAAA,GAAG,EAAE,+BADmB;AAExB;AACAC,MAAAA,QAAQ,EAAEF,QAHc;AAIxBG,MAAAA,SAAS,EAAE,CAACd,aAAD,EAAgBC,aAAhB,EAA+BI,QAA/B,EAAyCH,aAAzC;AAJa,KAAD,CAAzB;AAMD,GAfqE,CAiBtE;;;AACA,SAAO,CAACE,UAAD,EAAaC,QAAb,CAAP;AACD","sourcesContent":["import {\n  createClient,\n  dedupExchange,\n  cacheExchange,\n  fetchExchange,\n  ssrExchange,\n} from 'urql';\nimport { refreshTokenExchange } from './refreshExchange'\n\nimport 'isomorphic-unfetch';\n\nlet urqlClient = null;\nlet ssrCache = null;\n\nexport default function initUrqlClient(initialState, serverAccessToken) {\n  // Create a new client for every server-side rendered request to reset its state\n  // for each rendered page\n  // Reuse the client on the client-side however\n  console.log(`server token ${serverAccessToken}`)\n  const isServer = typeof window === 'undefined';\n  if (isServer || !urqlClient) {\n    ssrCache = ssrExchange({ initialState });\n\n    urqlClient = createClient({\n      url: 'http://localhost:4000/graphql',\n      // Active suspense mode on the server-side\n      suspense: isServer,\n      exchanges: [dedupExchange, cacheExchange, ssrCache, fetchExchange],\n    });\n  }\n\n  // Return both the cache and the client\n  return [urqlClient, ssrCache];\n}"]},"metadata":{},"sourceType":"module"}