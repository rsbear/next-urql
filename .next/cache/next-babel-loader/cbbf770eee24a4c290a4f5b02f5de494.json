{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const AuthUserDocument = gql`\n    query authUser {\n  me {\n    id\n    username\n    email\n  }\n}\n    `;\nexport function useAuthUserQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: AuthUserDocument\n  }, options));\n}\n;\nexport const KeyboardsDocument = gql`\n    query keyboards {\n  keyboards {\n    id\n    name\n    size\n    mount\n    images1500\n  }\n}\n    `;\nexport function useKeyboardsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: KeyboardsDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/Users/rsbear/dev/next-urql/generated/graphql.tsx"],"names":["gql","Urql","AuthUserDocument","useAuthUserQuery","options","useQuery","query","KeyboardsDocument","useKeyboardsQuery"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAkcA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;;KAA7B;AAUP,OAAO,SAASG,gBAAT,CAA0BC,OAAiE,GAAG,EAA9F,EAAkG;AACvG,SAAOH,IAAI,CAACI,QAAL;AAA+BC,IAAAA,KAAK,EAAEJ;AAAtC,KAA2DE,OAA3D,EAAP;AACD;AAAA;AACD,OAAO,MAAMG,iBAAiB,GAAGP,GAAI;;;;;;;;;;KAA9B;AAYP,OAAO,SAASQ,iBAAT,CAA2BJ,OAAkE,GAAG,EAAhG,EAAoG;AACzG,SAAOH,IAAI,CAACI,QAAL;AAAgCC,IAAAA,KAAK,EAAEC;AAAvC,KAA6DH,OAA7D,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any,\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any,\n};\n\nexport type Auth = {\n   __typename?: 'Auth',\n  id: Scalars['String'],\n  email: Scalars['String'],\n  token: Scalars['String'],\n  secret: Scalars['String'],\n  created: Scalars['DateTime'],\n};\n\nexport type Color = {\n   __typename?: 'Color',\n  id: Scalars['String'],\n  hex?: Maybe<Scalars['String']>,\n  ral?: Maybe<Scalars['String']>,\n};\n\nexport type ColorInput = {\n  hex?: Maybe<Scalars['String']>,\n  ral?: Maybe<Scalars['String']>,\n};\n\n\nexport type Edition = {\n   __typename?: 'Edition',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  name?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  cases?: Maybe<Array<Scalars['String']>>,\n  colors?: Maybe<Array<Scalars['String']>>,\n  plates?: Maybe<Array<Scalars['String']>>,\n};\n\nexport type EditionInput = {\n  id?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  cases?: Maybe<Array<Scalars['String']>>,\n  colors?: Maybe<Array<Scalars['String']>>,\n  plates?: Maybe<Array<Scalars['String']>>,\n};\n\nexport type Follow = {\n   __typename?: 'Follow',\n  id: Scalars['String'],\n  keyboardId?: Maybe<Scalars['String']>,\n  keysetId?: Maybe<Scalars['String']>,\n  keyboard: Keyboard,\n};\n\nexport type FollowInput = {\n  keyboardId?: Maybe<Scalars['String']>,\n  keysetId?: Maybe<Scalars['String']>,\n};\n\nexport type JoinKeyboard = {\n   __typename?: 'JoinKeyboard',\n  id: Scalars['String'],\n  keyboardId: Scalars['String'],\n  caseChoice: Scalars['String'],\n  plateChoice: Scalars['String'],\n  layoutChoice: Scalars['String'],\n  created: Scalars['DateTime'],\n  keyboard?: Maybe<Keyboard>,\n  user?: Maybe<User>,\n};\n\nexport type JoinKeyboardInput = {\n  caseChoice: Scalars['String'],\n  plateChoice: Scalars['String'],\n  layoutChoice: Scalars['String'],\n};\n\nexport type Keyboard = {\n   __typename?: 'Keyboard',\n  angle?: Maybe<Scalars['String']>,\n  announcement?: Maybe<Scalars['String']>,\n  brand?: Maybe<Scalars['String']>,\n  connector?: Maybe<Scalars['String']>,\n  details?: Maybe<Array<Scalars['String']>>,\n  editions?: Maybe<Array<Edition>>,\n  firmware?: Maybe<Scalars['String']>,\n  mount?: Maybe<Scalars['String']>,\n  layouts?: Maybe<Array<Scalars['String']>>,\n  pcb?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  support?: Maybe<Array<Scalars['String']>>,\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  images600?: Maybe<Array<Scalars['String']>>,\n  images800?: Maybe<Array<Scalars['String']>>,\n  images1500?: Maybe<Array<Scalars['String']>>,\n  imagesRaw?: Maybe<Array<Scalars['String']>>,\n  created: Scalars['DateTime'],\n  updated: Scalars['DateTime'],\n  maker?: Maybe<User>,\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n  groupBuySoon?: Maybe<Scalars['Boolean']>,\n  closed?: Maybe<Scalars['Boolean']>,\n  joins?: Maybe<Array<JoinKeyboard>>,\n  posts?: Maybe<Array<Post>>,\n};\n\nexport type KeyboardInput = {\n  angle?: Maybe<Scalars['String']>,\n  brand?: Maybe<Scalars['String']>,\n  connector?: Maybe<Scalars['String']>,\n  details?: Maybe<Array<Scalars['String']>>,\n  editions?: Maybe<Array<EditionInput>>,\n  firmware?: Maybe<Scalars['String']>,\n  mount?: Maybe<Scalars['String']>,\n  layouts?: Maybe<Array<Scalars['String']>>,\n  pcb?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  support?: Maybe<Array<Scalars['String']>>,\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n  groupBuySoon?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  closed?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Keyset = {\n   __typename?: 'Keyset',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  name: Scalars['String'],\n  profile: Scalars['String'],\n  stem: Scalars['String'],\n  kits?: Maybe<Array<Kit>>,\n  colors?: Maybe<Array<Color>>,\n  images600?: Maybe<Array<Scalars['String']>>,\n  images800?: Maybe<Array<Scalars['String']>>,\n  images1500?: Maybe<Array<Scalars['String']>>,\n  imagesRaw?: Maybe<Array<Scalars['String']>>,\n  details?: Maybe<Array<Scalars['String']>>,\n  created: Scalars['DateTime'],\n  updated: Scalars['DateTime'],\n  maker?: Maybe<User>,\n};\n\nexport type KeysetInput = {\n  name: Scalars['String'],\n  profile: Scalars['String'],\n  stem: Scalars['String'],\n  kits: Array<KitInput>,\n  colors: Array<ColorInput>,\n  details: Array<Scalars['String']>,\n};\n\nexport type Kit = {\n   __typename?: 'Kit',\n  id: Scalars['String'],\n  shortId: Scalars['String'],\n  kit?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Int']>,\n  suggestedPrice?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type KitInput = {\n  kit?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  price: Scalars['Int'],\n  suggestedPrice: Scalars['Int'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  signup: Scalars['Boolean'],\n  banUser: Scalars['Boolean'],\n  generateAuth: Scalars['Boolean'],\n  deleteAuth: Scalars['Boolean'],\n  makeKeyboard: Scalars['Boolean'],\n  updateKeyboardStage: Scalars['Boolean'],\n  updateKeyboard: Scalars['Boolean'],\n  keyboardAnnouncement: Scalars['Boolean'],\n  deleteKeyboard: Scalars['Boolean'],\n  makeKeyset: Scalars['Boolean'],\n  deleteKeyset: Scalars['Boolean'],\n  deleteEdition: Scalars['Boolean'],\n  voteKeyboardUp: Scalars['Boolean'],\n  voteKeyboardDown: Scalars['Boolean'],\n  deleteVote: Scalars['Boolean'],\n  joinKeyboard: Scalars['Boolean'],\n  deleteJoin: Scalars['Boolean'],\n  createPost: Scalars['Boolean'],\n  deletePost: Scalars['Boolean'],\n  followKeyboard: Scalars['Boolean'],\n  followKeyboardDelete: Scalars['Boolean'],\n  deleteFollow: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['String']\n};\n\n\nexport type MutationLoginArgs = {\n  secret: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationSignupArgs = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  secret: Scalars['String']\n};\n\n\nexport type MutationBanUserArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationGenerateAuthArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationDeleteAuthArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationMakeKeyboardArgs = {\n  images: Array<Scalars['Upload']>,\n  data: KeyboardInput\n};\n\n\nexport type MutationUpdateKeyboardStageArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationUpdateKeyboardArgs = {\n  data: KeyboardInput,\n  id: Scalars['String']\n};\n\n\nexport type MutationKeyboardAnnouncementArgs = {\n  announcement: Scalars['String'],\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteKeyboardArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationMakeKeysetArgs = {\n  images: Array<Scalars['Upload']>,\n  data: KeysetInput\n};\n\n\nexport type MutationDeleteKeysetArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteEditionArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationVoteKeyboardUpArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationVoteKeyboardDownArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteVoteArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationJoinKeyboardArgs = {\n  data: JoinKeyboardInput,\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteJoinArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationCreatePostArgs = {\n  body: Scalars['String'],\n  id: Scalars['String']\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationFollowKeyboardArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationFollowKeyboardDeleteArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationDeleteFollowArgs = {\n  id: Scalars['String']\n};\n\nexport type Post = {\n   __typename?: 'Post',\n  id: Scalars['String'],\n  body: Scalars['String'],\n  created: Scalars['DateTime'],\n  user: User,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  bye: Scalars['String'],\n  users: Array<User>,\n  me?: Maybe<User>,\n  auths: Array<Auth>,\n  keyboards: Array<Keyboard>,\n  keyboard: Keyboard,\n  sortKeyboards: Array<Keyboard>,\n  keysets: Array<Keyset>,\n  keyset: Keyset,\n  sortKeysets: Array<Keyset>,\n  editions: Array<Edition>,\n  votes: Array<Vote>,\n  joinss: Array<JoinKeyboard>,\n  postss: Array<Post>,\n  follows: Array<Follow>,\n};\n\n\nexport type QueryKeyboardArgs = {\n  shortId: Scalars['String']\n};\n\n\nexport type QuerySortKeyboardsArgs = {\n  where: SearchInput\n};\n\n\nexport type QueryKeysetArgs = {\n  shortId: Scalars['String']\n};\n\n\nexport type QuerySortKeysetsArgs = {\n  where: SearchInput\n};\n\nexport type SearchInput = {\n  interestCheck?: Maybe<Scalars['Boolean']>,\n  market?: Maybe<Scalars['Boolean']>,\n  groupBuy?: Maybe<Scalars['Boolean']>,\n};\n\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String'],\n  keyboards: Array<Keyboard>,\n  votes: Array<Vote>,\n  follows: Array<Follow>,\n  keyboardjoins: Array<JoinKeyboard>,\n};\n\nexport type Vote = {\n   __typename?: 'Vote',\n  id: Scalars['String'],\n  editionId: Scalars['String'],\n  created: Scalars['DateTime'],\n  expiration?: Maybe<Scalars['String']>,\n  user?: Maybe<User>,\n};\n\nexport type AuthUserQueryVariables = {};\n\n\nexport type AuthUserQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email'>\n  )> }\n);\n\nexport type KeyboardsQueryVariables = {};\n\n\nexport type KeyboardsQuery = (\n  { __typename?: 'Query' }\n  & { keyboards: Array<(\n    { __typename?: 'Keyboard' }\n    & Pick<Keyboard, 'id' | 'name' | 'size' | 'mount' | 'images1500'>\n  )> }\n);\n\n\nexport const AuthUserDocument = gql`\n    query authUser {\n  me {\n    id\n    username\n    email\n  }\n}\n    `;\n\nexport function useAuthUserQuery(options: Omit<Urql.UseQueryArgs<AuthUserQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<AuthUserQuery>({ query: AuthUserDocument, ...options });\n};\nexport const KeyboardsDocument = gql`\n    query keyboards {\n  keyboards {\n    id\n    name\n    size\n    mount\n    images1500\n  }\n}\n    `;\n\nexport function useKeyboardsQuery(options: Omit<Urql.UseQueryArgs<KeyboardsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<KeyboardsQuery>({ query: KeyboardsDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}