{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rsbear/dev/next-urql/lib/withUrqlClient.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Provider } from \"urql\";\nimport cookie from \"cookie\";\nimport ssrPrepass from \"react-ssr-prepass\";\nimport initUrqlClient from \"./initUrql\";\nimport { useAuthUserQuery } from \"../generated/graphql\";\nvar isBrowser = true;\n\nvar withUrqlClient = function withUrqlClient(App) {\n  var withUrql = function withUrql(props) {\n    var _useAuthUserQuery = useAuthUserQuery(),\n        _useAuthUserQuery2 = _slicedToArray(_useAuthUserQuery, 1),\n        _useAuthUserQuery2$ = _useAuthUserQuery2[0],\n        fetching = _useAuthUserQuery2$.fetching,\n        error = _useAuthUserQuery2$.error,\n        data = _useAuthUserQuery2$.data;\n\n    var urqlClient = React.useMemo(function () {\n      return props.urqlClient || initUrqlClient(props.urqlState, props.serverAccessToken)[0];\n    }, []);\n    var authUser = !fetching && data && data.me ? data.me : null;\n    return __jsx(Provider, {\n      value: urqlClient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, __jsx(App, _extends({}, props, {\n      urqlClient: urqlClient,\n      authUser: authUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })));\n  };\n\n  withUrql.getInitialProps =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(ctx) {\n      var AppTree, req, res, appProps, serverAccessToken, cookies, response, data, _initUrqlClient, _initUrqlClient2, urqlClient, ssrCache, urqlState;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree;\n              req = ctx.req, res = ctx.res; // Run the wrapped component's getInitialProps function\n\n              appProps = {};\n\n              if (!App.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return App.getInitialProps(ctx);\n\n            case 6:\n              appProps = _context.sent;\n\n            case 7:\n              // getInitialProps is universal, but we only want\n              // to run server-side rendered suspense on the server\n              serverAccessToken = \"\";\n\n              if (isBrowser) {\n                _context.next = 18;\n                break;\n              }\n\n              cookies = cookie.parse(req.headers.cookie ? req.headers.cookie : \"\");\n\n              if (!cookies.rfs) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 13;\n              return fetch(\"http://localhost:4000/refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                  cookie: \"rfs=\" + cookies.rfs\n                }\n              });\n\n            case 13:\n              response = _context.sent;\n              _context.next = 16;\n              return response.json();\n\n            case 16:\n              data = _context.sent;\n              serverAccessToken = data.accessToken;\n\n            case 18:\n              if (!isBrowser) {\n                _context.next = 20;\n                break;\n              }\n\n              return _context.abrupt(\"return\", appProps);\n\n            case 20:\n              _initUrqlClient = initUrqlClient({}, serverAccessToken), _initUrqlClient2 = _slicedToArray(_initUrqlClient, 2), urqlClient = _initUrqlClient2[0], ssrCache = _initUrqlClient2[1]; // Run suspense and hence all urql queries\n\n              _context.prev = 21;\n              _context.next = 24;\n              return ssrPrepass(__jsx(AppTree, {\n                pageProps: _objectSpread({}, appProps, {\n                  urqlClient: urqlClient\n                }),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 63\n                },\n                __self: this\n              }));\n\n            case 24:\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](21);\n              console.log(_context.t0);\n\n            case 29:\n              // Extract query data from the urql store\n              // Extract the SSR query data from urql's SSR cache\n              urqlState = ssrCache.extractData();\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                urqlState: urqlState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[21, 26]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withUrql;\n};\n\nexport default withUrqlClient;","map":{"version":3,"sources":["/Users/rsbear/dev/next-urql/lib/withUrqlClient.tsx"],"names":["React","Provider","cookie","ssrPrepass","initUrqlClient","useAuthUserQuery","isBrowser","withUrqlClient","App","withUrql","props","fetching","error","data","urqlClient","useMemo","urqlState","serverAccessToken","authUser","me","getInitialProps","ctx","AppTree","req","res","appProps","cookies","parse","headers","rfs","fetch","method","credentials","response","json","accessToken","ssrCache","console","log","extractData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Provider } from \"urql\";\nimport cookie from \"cookie\";\n\nimport ssrPrepass from \"react-ssr-prepass\";\nimport initUrqlClient from \"./initUrql\";\nimport { useAuthUserQuery } from \"../generated/graphql\";\n\nconst isBrowser: boolean = typeof window !== \"undefined\";\n\nconst withUrqlClient = App => {\n  const withUrql = props => {\n    const [{ fetching, error, data }] = useAuthUserQuery();\n    const urqlClient = React.useMemo(\n      () =>\n        props.urqlClient ||\n        initUrqlClient(props.urqlState, props.serverAccessToken)[0],\n      []\n    );\n    const authUser = !fetching && data && data.me ? data.me : null;\n    return (\n      <Provider value={urqlClient}>\n        <App {...props} urqlClient={urqlClient} authUser={authUser} />\n      </Provider>\n    );\n  };\n\n  withUrql.getInitialProps = async ctx => {\n    const { AppTree } = ctx;\n    const { req, res } = ctx;\n    // Run the wrapped component's getInitialProps function\n    let appProps = {};\n    if (App.getInitialProps) appProps = await App.getInitialProps(ctx);\n\n    // getInitialProps is universal, but we only want\n    // to run server-side rendered suspense on the server\n    let serverAccessToken = \"\";\n    if (!isBrowser) {\n      const cookies = cookie.parse(\n        req.headers.cookie ? req.headers.cookie : \"\"\n      );\n      if (cookies.rfs) {\n        const response = await fetch(\"http://localhost:4000/refresh_token\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            cookie: \"rfs=\" + cookies.rfs\n          }\n        });\n        const data = await response.json();\n        serverAccessToken = data.accessToken;\n      }\n    }\n\n    if (isBrowser) return appProps;\n\n    const [urqlClient, ssrCache] = initUrqlClient({}, serverAccessToken);\n\n    // Run suspense and hence all urql queries\n\n    try {\n      await ssrPrepass(\n        <AppTree\n          pageProps={{\n            ...appProps,\n            urqlClient\n          }}\n        />\n      );\n    } catch (err) {\n      console.log(err);\n    }\n\n    // Extract query data from the urql store\n    // Extract the SSR query data from urql's SSR cache\n    const urqlState = ssrCache.extractData();\n\n    return {\n      ...appProps,\n      urqlState,\n      serverAccessToken\n    };\n  };\n\n  return withUrql;\n};\n\nexport default withUrqlClient;\n"]},"metadata":{},"sourceType":"module"}